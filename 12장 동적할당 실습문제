1.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
	int *p = NULL;
	int n, sum = 0;
	scanf("%d", &n);
	p = (int*)malloc(n * sizeof(int));
	if (p == NULL)
		return 0;
	for (int i = 0; i < n; i++) {
		scanf("%d", &p[i]);
	}
	for (int i = 0; i < n; i++) {
		sum += p[i];
	}
	printf("%d", sum);
	free(p);
	
	return 0;
}

2.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
	float *p = NULL;
	int n;
	float big = 0.0;
	scanf("%d", &n);
	p = (float*)malloc(n * sizeof(float));
	if (p == NULL)
		return 0;
	for (int i = 0; i < n; i++) {
		scanf("%f", &p[i]);
	}
	big = p[0];
	for (int i = 0; i < n; i++) {
		if (big < p[i]) {
			big = p[i];
		}
	}
	printf("%.2f", big);
	free(p);
	
	return 0;
}

3.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
	int *p = NULL;
	int N, D;
	scanf("%d", &N);
	p = (int*)malloc(N * sizeof(int));
	if (p == NULL)
		return 0;
	for (int i = 0; i < N; i++) {
		scanf("%d", &p[i]);
	}
	scanf("%d", &D);
	p = (int*)realloc(p, (N - D) * sizeof(int));
	for (int i = 0; i < N - D; i++) {
		printf("%d\n", p[i]);
	}
	free(p);
	
	return 0;
}

4.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
	int a, b;
	scanf("%d%d", &a, &b);
	char **p = NULL;
	char A = 'a';
	p = (char**)malloc(b * sizeof(char*));
	if (p == NULL)
		return -1;
	for (int i = 0; i < b; i++) {
		p[i] = (char*)malloc(a * sizeof(char));
		if (p[i] == NULL)
			return -1;
	}
	for (int i = 0; i < b; i++) {
		for (int j = 0; j < a; j++) {
			p[i][j] = A;
			if (A == 'z') {
				A = 'A';
			}
			else if (A == 'Z') {
				A = 'a';
			}
			else {
				A++;
			}
		}
	}
	for (int i = 0; i < b; i++) {
		for (int j = 0; j < a; j++) {
			printf("%c ", p[i][j]);
		}
		printf("\n");
	}
	for (int i = 0; i < b; i++) {
		free(p[i]);
	}
	free(p);

	return 0;
}

5.
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main() {
	int N = 0, cnt1 = 0, cnt2 = 0;
	char* p = NULL, str1, str2;
	scanf("%d", &N);
	getchar();
	p = (char*)malloc((N + 1) * sizeof(char));
	if (p == NULL)
		return -1;
	scanf("%s", p);
	getchar();
	scanf("%c %c", &str1, &str2);
	for (int i = 0; i < N; i++) {
		if (p[i] == str1) {
			cnt1++;
		}
	}
	for (int i = 0; i < N; i++) {
		if (p[i] == str2) {
			cnt2++;
		}
	}
	printf("%d %d", cnt1, cnt2);
	free(p);

	return 0;
}

6.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
typedef struct  {
	char name[8];
	int kor;
	int eng;
	int math;
	double avg;
}student;
int main() {
	int N;
	scanf("%d", &N);
	student *p = NULL;
	p = (student*)malloc(N * sizeof(student));
	if (p == NULL) {
		return -1;
	}
	for (int i = 0; i < N; i++) {
		scanf("%s %d %d %d", p[i].name, &p[i].kor, &p[i].eng, &p[i].math);
		p[i].avg = (p[i].kor + p[i].eng + p[i].math) / 3.0;
	}
	for (int i = 0; i < N; i++) {
		printf("%s %.1f ", p[i].name, p[i].avg);
		if (p[i].kor >= 90 || p[i].eng >= 90 || p[i].math >= 90) {
			printf("GREAT ");
		}
		if (p[i].kor < 70 || p[i].eng < 70 || p[i].math < 70) {
			printf("BAD ");
		}
		printf("\n");
	}
	free(p);

	return 0;
}

7.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
	int N, tmp;
	scanf("%d", &N);
	int *p = NULL;
	p = (int*)malloc(N * sizeof(int));
	if (p == NULL) 
		return -1;
	for (int i = 0; i < N; i++) {
		scanf("%d", &p[i]);
	}
	for (int i = 0; i < N - 1; i++) {
		if (p[i] > p[i + 1]) {
			tmp = p[i];
			p[i] = p[i + 1];
			p[i + 1] = tmp;
		}
	}
	for (int i = 0; i < N; i++) {
		printf("%d\n", p[i]);
	}
	free(p);

	return 0;
}

8.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
	int N, cnt = 0;
	scanf("%d", &N);
	char *p = NULL;
	p = (char*)malloc(N * sizeof(char));
	if (p == NULL) 
		return -1;
	scanf("%s", p);
	for (int i = 0; i < N - 2; i++) {
		if (p[i] == 'c'&&p[i + 1] == 'a'&&p[i + 2] == 't') {
			cnt++;
		}
	}
	printf("%d", cnt);

	free(p);

	return 0;
}

9.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
	int N, len = 0, minlen = 100;
	scanf("%d", &N);
	getchar();
	char **p = NULL;
	char *min = NULL;
	char str[101] = "";
	p = (char**)malloc(N * sizeof(char*));
	if (p == NULL)
		return -1;
	for (int i = 0; i < N; i++) {
		gets(str);
		len = strlen(str);
		p[i] = (char*)malloc(len * sizeof(char*));
		if (p == NULL)
			return -1;
		strcpy(p[i], str);
		if (len < minlen) {
			minlen = len;
			min = p[i];
		}
	}
	printf("%s", min);
	for (int i = 0; i < N; i++) {
		free(p[i]);
	}
	free(p);

	return 0;
}

10.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
	int N, len = 0, a = 0, b = 0;
	scanf("%d", &N);
	getchar();
	char **p = NULL;
	char str[101] = "";
	char *tmp = NULL;
	p = (char**)malloc(N * sizeof(char*));
	if (p == NULL)
		return -1;
	for (int i = 0; i < N; i++) {
		gets(str);
		len = strlen(str);
		p[i] = (char*)malloc((len+1) * sizeof(char*));
		if (p == NULL)
			return -1;
		strcpy(p[i], str);
	}
	for (int i = 0; i < N - 1; i++) {
		for (int j = 0; j < N - 1; j++) {
			a = strlen(p[j]);
			b = strlen(p[j + 1]);
			if (a < b) {
				tmp = p[j];
				p[j] = p[j + 1];
				p[j + 1] = tmp;
			}
		}
	}
	for (int i = 0; i < N; i++) {
		printf("%s\n", p[i]);
	}
	for (int i = 0; i < N; i++) {
		free(p[i]);
	}
	free(p);

	return 0;
}
/*
program
good
this is string
language
*/

11.
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main() {
	int *p = NULL, q[20] = { 0 };
	int N = 0, cnt = 0;
	p = (int*)malloc(5 * sizeof(int));
	if (p == NULL)
		return -1;
	scanf("%d", &p[cnt]);
	while (p[cnt] != -1 && cnt < 20) {
		cnt++;
		if ((cnt - 5) % 3 == 0 && cnt >= 5) {
			for (int i = 0; i < cnt; i++) {
				q[i] = p[i];
			}
			free(p);
			p = (int*)malloc((cnt + 3) * sizeof(int));
			if (p == NULL)
				return -1;
			for (int i = 0; i < cnt; i++) {
				p[i] = q[i];
			}
		}
		scanf("%d", &p[cnt]);
	}
	cnt++;
	for (int i = 0; i < cnt; i++) {
		printf(" %d", p[i]);
	}
	free(p);

	return 0;
}

12.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
	int N, a = 0;
	int* p = NULL, *q = NULL;
	scanf("%d", &N);
	getchar();
	p = (int*)malloc(N * sizeof(int));
	if (p == NULL)
		return -1;
	for (int i = 0; i < N; i++) {
		p[i] = i;
	}
	q = (int*)malloc((N - 1) * sizeof(int));
	if (q == NULL)
		return -1;
	for (int i = 0; i < N; i++) {
		if (i == N / 2) {
			continue;
		}
		q[a] = i;
		a++;
	}
	for (int i = 0; i < N - 1; i++) {
		printf(" %d", q[i]);
	}
	free(p);
	free(q);

	return 0;
}

13.
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int main() {
	int N = 0, len = 0;
	char temp[101] = "";
	char** p = NULL, *tmp = NULL;
	scanf("%d", &N);
	getchar();
	p = (char**)malloc(N * sizeof(char*));
	if (p == NULL)
		return -1;
	for (int i = 0; i < N; i++) {
		gets(temp);
		len = strlen(temp);
		p[i] = (char*)malloc((len + 1) * sizeof(char));
		if (p[i] == NULL)
			return -1;
		strcpy(p[i], temp);
	}
	for (int i = 0; i < N - 1; i++) {
		for (int j = 0; j < N - i - 1; j++) {
			if (strcmp(p[j], p[j + 1]) > 0) {
				tmp = p[j];
				p[j] = p[j + 1];
				p[j + 1] = tmp;
			}
		}
	}
	for (int i = 0; i < N; i++) {
		printf("%s\n", p[i]);
	}
	for (int i = 0; i < N; i++)
		free(p[i]);
	free(p);

	return 0;
}
