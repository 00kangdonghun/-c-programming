1-1.

1-2.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
typedef struct student_info {
	char name[11];
	int S1;
	int S2;
	double avg;
}student_info;
void insertData(student_info* s, int N);
double getAllavg(student_info s[], int N);
void printResult(student_info* s, int N, double avg);
int main() {
	int N = 0;
	double total_avg = 0.0;
	student_info S[100] = { "" };
	scanf("%d", &N);
	getchar();
	insertData(S, N);
	total_avg = getAllavg(S, N);
	printResult(S, N, total_avg);

	return 0;
}
void insertData(student_info* s, int N) {
	student_info* p = s;
	for (p = s; p < s + N; p++) {
		scanf("%s %d %d", p->name, &p->S1, &p->S2);
		p->avg = p->S1 * 0.4 + p->S2 * 0.6;
	}
}
double getAllavg(student_info s[], int N) {
	student_info* p = s;
	int bottom_st = 0;
	double total_avg = 0.0;
	for (p = s; p < s + N; p++) {
		total_avg += p->avg;
	}
	total_avg /= (double)N;
	for (p = s; p < s + N; p++) {
		if (total_avg >= p->avg) {
			bottom_st++;
		}
	}
	printf("%.2lf %d\n", total_avg, bottom_st);
	return total_avg;
}
void printResult(student_info* s, int N, double avg) {
	student_info* p = s;
	for (p = s; p < s + N; p++) {
		if (p->avg <= avg) {
			printf("%s %.2lf\n", p->name, p->avg);
		}
	}
}

2-1.

2-2.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int check_u(char* p, char* q);
int main() {
	int N = 0, M1 = 0, M2 = 0;
	int cnt = 0, min = 101;
	char arr[101] = "", output[101] = "";
	scanf("%d", &N);
	scanf("%d %d", &M1, &M2);
	getchar();
	for (int i = 0; i < N; i++) {
		gets(arr);
		cnt = check_u(arr + M1, arr + M2);
		if (!cnt) {
			continue;
		}
		if (min > cnt) {
			min = cnt;
			strcpy(output, arr);
		}
		else if (min == cnt && strlen(output) <= strlen(arr)) {
			strcpy(output, arr);
		}
	}
	printf("%s", output);

	return 0;
}
int check_u(char* p, char* q) {
	char* a = p;
	int cnt = 0;
	for (a = p; a <= q && *a; a++) {
		if (*a >= 'A' && *a <= 'Z') {
			cnt++;
		}
	}
	return cnt;
}

3-1.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int main() {
	char A[101] = "", B[101] = "", output[101] = "";
	char* Aword[20] = { NULL }, *Bword[20] = { NULL };
	char* p = A, *q = A;
	int Asize = 0, Bsize = 0;
	int cnt = 0;
	int len = 0;
	gets(A);
	gets(B);
	while (*p) {
		if (*p == ' ') {
			*p = '\0';
			Aword[Asize] = q;
			Asize++;
			q += strlen(q) + 1;		
		}
		p++;
	}
	Aword[Asize] = q;
	Asize++;
	p = B;
	q = B;
	while (*p) {
		if (*p == ' ') {
			*p = '\0';
			Bword[Bsize] = q;
			Bsize++;
			q += strlen(q) + 1;	
		}
		p++;
	}
	Bword[Bsize] = q;
	Bsize++;
	for (int i = 0; i < Asize; i++) {
		for (int j = 0; j < Bsize; j++) {
			if (strcmp(Aword[i], Bword[j]) == 0) {
				cnt++;
				if (len < strlen(Aword[i])) {
					len = strlen(Aword[i]);
					strcpy(output, Aword[i]);
				}
				else if (len == strlen(Aword[i]) && strcmp(output, Aword[i]) > 0) {
					strcpy(output, Aword[i]);
				}
			}
		}
	}
	printf("%d\n", cnt);
	printf("%s\n", output);

	return 0;
}

4-2.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
int num_of_divisors(int M, int* arr);
int cal_sum(int* onearr, int size);
int main() {
	int N = 0, M = 0, K = 0, sum = 0, fine = 0;
	int** darr, *num, temp[20];
	scanf("%d", &N);
	darr = (int**)malloc(N * sizeof(int*));
	if (darr == NULL) {
		printf("not enough memory");
		return -1;
	}
	num = (int*)malloc(N * sizeof(int));
	if (num == NULL) {
		printf("not enough memory");
		return -1;
	}
	for (int i = 0; i < N; i++) {
		scanf("%d", &M);
		num[i] = num_of_divisors(M, temp);
		if (num[i] != -1) {
			darr[i] = (int*)malloc(num[i] * sizeof(int));
			if (darr[i] == NULL) {
				printf("not enough memory");
				return -1;
			}
			for (int j = 0; j < num[i]; j++) {
				darr[i][j] = temp[j];
			}
		}
	}
	scanf("%d", &K);
	if (num[K] == -1) 
		printf("-1");
	else
		for (int i = num[K] - 1; i >= 0; i--)
			printf("%d ", darr[K][i]);
	printf("\n");

	for (int i = 0; i < N; i++) {
		if (num[i] != -1) {
			sum = cal_sum(darr[i], num[i]);
			if (sum > fine) {
				fine = sum;
			}
		}
	}
	printf("%d\n", fine);
	for (int i = 0; i < N; i++) {
		free(darr[i]);
	}
	free(num);
	free(darr);

	return 0;
}
int num_of_divisors(int M, int* arr) {
	int cnt = 0, size = 0;
	for (int i = 1; i <= M; i++) {
		if (M % i == 0) {
			arr[size] = i;
			size++;
		}
		if (size > 20) {
			return -1;
		}
	}
	return size;
}
int cal_sum(int* onearr, int size) {
	int* p = onearr, sum = 0;
	for (p = onearr; p < onearr + size; p++) {
		sum += *p;
	}
	return sum;
}

5-1.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
typedef struct job {
	char* name; 
	char* start; 
	char* end; 
	int money; 
}ABC;
int main() {
	int N = 0, len = 0;
	char temp[101] = "";
	ABC* J = NULL, *flag = NULL;
	scanf("%d", &N);
	getchar();
	J = (ABC*)malloc(N * sizeof(ABC));
	if (J == NULL) {
		printf("Not enough memory");
		return -1;
	}
	for (int i = 0; i < N; i++) {
		scanf("%s", temp);
		getchar();
		len = strlen(temp);
		J[i].name = (char*)malloc((len + 1) * sizeof(char));
		if (J[i].name == NULL) {
			printf("Not enough memory");
			return -1;
		}
		strcpy(J[i].name, temp);
		J[i].start = (char*)malloc(9 * sizeof(char));
		if (J[i].start == NULL) {
			printf("Not enough memory");
			return -1;
		}
		scanf("%s", J[i].start);
		getchar();
		J[i].end = (char*)malloc(9 * sizeof(char));
		if (J[i].end == NULL) {
			printf("Not enough memory");
			return -1;
		}
		scanf("%s", J[i].end);
		scanf("%d", &J[i].money);
		getchar();
	}
	flag = J;
	for (int i = 0; i < N; i++) {
		if (strcmp(flag->start, J[i].start) > 0)
			flag = &J[i];
	}
	printf("%s %s %s %d", flag->name, flag->start, flag->end, flag->money);
	for (int i = 0; i < N; i++) {
		free(J[i].name);
		free(J[i].start);
		free(J[i].end);
	}
	free(J);

	return 0;
}

5-2.
#pragma warning (disable:4996)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
typedef struct job {
	char* name; 
	char* start; 
	char* end;
	int money; 
}ABC;
int check_dup(ABC job1, ABC job2, ABC job3);
char* get_start_end(ABC job1, ABC job2, ABC job3);
int main() {
	int N = 0, len = 0, fflag = 0, tmp = 0, t_tmp = 0;
	int max = 0;
	char temp[101] = "", *max_J = NULL;
	ABC* J = NULL, *flag = NULL;
	ABC AA, BB, CC;
	scanf("%d", &N);
	getchar();
	J = (ABC*)malloc(N * sizeof(ABC));
	if (J == NULL) {
		printf("Not enough memory");
		return -1;
	}
	for (int i = 0; i < N; i++) {
		scanf("%s", temp);
		getchar();
		len = strlen(temp);
		J[i].name = (char*)malloc((len + 1) * sizeof(char));
		if (J[i].name == NULL) {
			printf("Not enough memory");
			return -1;
		}
		strcpy(J[i].name, temp);
		J[i].start = (char*)malloc(9 * sizeof(char));
		if (J[i].start == NULL) {
			printf("Not enough memory");
			return -1;
		}
		scanf("%s", J[i].start);
		getchar();
		J[i].end = (char*)malloc(9 * sizeof(char));
		if (J[i].end == NULL) {
			printf("Not enough memory");
			return -1;
		}
		scanf("%s", J[i].end);
		scanf("%d", &J[i].money);
		getchar();
	}
	for (int i = 0; i < N; i++) {
		for (int j = i + 1; j < N; j++) {
			for (int k = j + 1; k < N; k++) {
				tmp = check_dup(J[i], J[j], J[k]);
				if (tmp) {
					t_tmp = J[i].money + J[j].money + J[k].money;
					if (t_tmp > max) {
						AA = J[i];
						BB = J[j];
						CC = J[k];
						max = t_tmp;
						max_J = get_start_end(J[i], J[j], J[k]);
						fflag++;
					}
				}
			}
		}
	}
	if (fflag) {
		printf("%s %s %s\n", AA.name, BB.name, CC.name);
		printf("%d\n", max);
		printf("%s", max_J);
	}
	else {
		printf("NONE");
	}
	printf("%s %s %s %d", flag->name, flag->start, flag->end, flag->money);
	for (int i = 0; i < N; i++) {
		free(J[i].name);
		free(J[i].start);
		free(J[i].end);
	}
	free(J);
	return 0;
}
int check_dup(ABC job1, ABC job2, ABC job3) {
	if (strcmp(job1.end, job2.start) < 0 && strcmp(job2.end, job3.start) < 0)
		return 1;
	if (strcmp(job1.end, job3.start) < 0 && strcmp(job3.end, job2.start) < 0)
		return 1;
	if (strcmp(job2.end, job1.start) < 0 && strcmp(job1.end, job3.start) < 0)
		return 1;
	if (strcmp(job2.end, job3.start) < 0 && strcmp(job3.end, job1.start) < 0)
		return 1;
	if (strcmp(job3.end, job1.start) < 0 && strcmp(job1.end, job2.start) < 0)
		return 1;
	if (strcmp(job3.end, job2.start) < 0 && strcmp(job2.end, job1.start) < 0)
		return 1;
	return 0;
}
char* get_start_end(ABC job1, ABC job2, ABC job3) {
	char* time = NULL;
	time = (char*)malloc(17 * sizeof(char));
	if (time == NULL) {
		printf("Not enough memory");
		return -1;
	}
	if (strcmp(job1.start, job2.start) < 0 && strcmp(job1.start, job3.start) < 0) {
		strcpy(time, job1.start);
	}
	else if (strcmp(job2.start, job1.start) < 0 && strcmp(job2.start, job3.start) < 0) {
		strcpy(time, job2.start);
	}
	else if (strcmp(job3.start, job1.start) < 0 && strcmp(job3.start, job2.start) < 0) {
		strcpy(time, job3.start);
	}
	strcat(time, " ");
	if (strcmp(job1.end, job2.end) > 0 && strcmp(job1.end, job3.end) > 0) {
		strcat(time, job1.end);
	}
	else if (strcmp(job2.end, job1.end) > 0 && strcmp(job2.end, job3.end) > 0) {
		strcat(time, job2.end);
	}
	else if (strcmp(job3.end, job1.end) > 0 && strcmp(job3.end, job2.end) > 0) {
		strcat(time, job3.end);
	}
	return time;
}
