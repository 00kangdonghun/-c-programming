1-1.

1-2.
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct st {
	char* str; // 문자열 저장
	int cnt; // 자음 수 저장
	int num;	// 숫자 저장
	int result;	// 곱셈결과 저장
};
int main() {
	int N, len = 0, cnt = 0; 
	char c[101] = "", ch = '\0'; 
	struct st* S = NULL, tmp = { "",0 };
	scanf("%d", &N); 
	getchar();
	S = (struct st*)malloc(N * sizeof(struct st)); 
	if (S == NULL)  
		return -1; 
	for (int i = 0; i < N; i++) { 
		cnt = 0; 
		scanf("%s", c); 
		getchar();
		len = strlen(c); 
		S[i].str = (char*)malloc((len + 1) * sizeof(char)); 
		if (S[i].str == NULL) 
			return -1; 
		strcpy(S[i].str, c); 
		for (int j = 0; j < len; j++) { 
			ch = S[i].str[j]; 
			if ('0' <= ch && ch <= '9') { 
				S[i].num = ch - '0'; 
			}
			else if (ch != 'a' && ch != 'A' && ch != 'e' && ch != 'E' && ch != 'i' && ch != 'I' && ch != 'o' && ch != 'O' && ch != 'u' && ch != 'U') { 
				cnt++; 
			}
		}
		S[i].cnt = cnt; 
		S[i].result = S[i].num * S[i].cnt; 
	}

	for (int i = 0; i < N - 1; i++) {
		for (int j = 0; j < N - i - 1; j++) {
			if (S[j].result < S[j + 1].result) { 
				tmp = S[j];
				S[j] = S[j + 1];
				S[j + 1] = tmp; 
			}
		}
	}
	for (int i = 0; i < N; i++) {
		printf("%s\n", S[i].str);
	}
	for (int i = 0; i < N; i++) {
		if (S[i].str != NULL)
			free(S[i].str); 
	}
	if (S != NULL)
		free(S); 

	return 0;
}

2.
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct {
	char letters[21];
	int count;
} word;
int main() {
	char **r = NULL, *p = NULL, *q = NULL; 
	char str[501] = ""; 
	int N, len = 0, ncnt = 0, cnt = 0, a = 0, mcnt = 0, b = 0; 
	word *w = NULL, *wp = NULL, c = { "",0 }; 
	scanf("%d", &N); 
	getchar(); 
	r = (char**)malloc(N * sizeof(char*)); 
	if (r == NULL) 
		return -1; 
	for (int i = 0; i < N; i++) { 
		gets_s(str, 501);
		len = strlen(str);
		p = str;
		while (*p) {
			if (*p >= 'A' && *p <= 'Z')
				*p = *p + 'a' - 'A';
			p++;
		}
		r[i] = (char*)malloc((len + 1) * sizeof(char));
		if (r[i] == NULL)
			return -1;
		strcpy(r[i], str);
		p = r[i];
		while (*p) {
			if (*p == ' ')
				*p = '\0';
			p++;
		}
		for (p = r[i]; p < r[i] + len; p++) {
			for (q = p; q < r[i] + len; q++) {
				if (strcmp(p, q) == 0)
					ncnt++;
				q += strlen(q);
			}
			if (ncnt == 1) {
				cnt++;
			}
			p += strlen(p);
			ncnt = 0;
		}
		w = (word*)malloc(cnt * sizeof(word));
		if (w == NULL)
			return -1;
		for (int i = 0; i < cnt; i++) {
			w[i].count = 1;
		}
		mcnt = cnt;
		for (p = r[i]; p < r[i] + len; p++) {
			for (wp = w; wp < w + cnt - mcnt; wp++) {
				if (strcmp(p, wp->letters) == 0) {
					wp->count++;
					a++;
				}
			}
			if (!a) {
				strcpy(wp->letters, p);
				mcnt--;
			}
			a = 0;
			p += strlen(p);
		}
		for (int j = 0; j < cnt; j++) {
			if (c.count < w[j].count) {
				c = w[j];
				b = i;
			}
		}
		cnt = 0;
		free(w);
		free(r[i]);
	}
	printf("%d %d %s\n", b, c.count, c.letters);
	free(r);

	return 0;
}

3-1.

3-2.
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct {
	char* name; // 과목 이름
	double score; // 과목 점수
}subject;
typedef struct {
	char* name; // 학생 이름
	char id[5]; // 학생 학번
	int numSubject; // 과목 개수
	subject* psub; // 과목 구조체 포인터
	double avg; // 모든 과목의 평균 점수
}student;
int main() {
	student *S = NULL, tmp = { NULL }; 
	int n, m, len = 0, a = 0, cnt = 0;
	char str1[101] = "";
	char *p = NULL, *q = NULL;
	char str2[101] = "";
	int c = 0;
	double score = 0;
	scanf("%d", &n);
	getchar();
	S = (student*)malloc(n * sizeof(student));		
	if (S == NULL)
		return -1;
	for (int i = 0; i < n; i++) {
		S[i].numSubject = 0;
		S[i].avg = 0.0;
	}
	for (int i = 0; i < n; i++) {
		gets(str1);
		a = strlen(str1);
		p = str1;
		while (*p) {
			if (*p == ' ')
				*p = '\0';
			p++;
		}
		p = str1;
		len = strlen(p);
		S[i].name = (char*)malloc((len + 1) * sizeof(student));	
		if (S[i].name == NULL)
			return -1;
		strcpy(S[i].name, p);
		p += len + 1;
		strcpy(S[i].id, p);
		p += 5;
		q = p;
		while (q < str1 + a) {
			S[i].numSubject++;
			q += strlen(q) + 1;
			q += strlen(q) + 1;
		}
		S[i].psub = (subject*)malloc(S[i].numSubject * sizeof(subject));	
		if (S[i].psub == NULL)
			return -1;
		cnt = 0;
		while (p < str1 + a) {
			len = strlen(p);
			S[i].psub[cnt].name = (char*)malloc((len + 1) * sizeof(char));		
			if (S[i].psub[cnt].name == NULL)
				return -1;
			strcpy(S[i].psub[cnt].name, p);
			p += len + 1;
			S[i].psub[cnt].score = atof(p);
			p += strlen(p) + 1;
			cnt++;
		}
		for (int j = 0; j < S[i].numSubject; j++) {
			S[i].avg += (double)S[i].psub[j].score;
		}
		S[i].avg /= (double)S[i].numSubject;
	}
	for (int i = 0; i < n - 1; i++) {
		for (int j = 0; j < n - i - 1; j++) {
			if (S[j].avg < S[j + 1].avg) {
				tmp = S[j];
				S[j] = S[j + 1];
				S[j + 1] = tmp;
			}
			if (S[j].avg == S[j + 1].avg && strcmp(S[j].id, S[j + 1].id) > 0) {
				tmp = S[j];
				S[j] = S[j + 1];
				S[j + 1] = tmp;
			}
		}
	}
	scanf("%d", &m);
	for (int i = 0; i < S[m - 1].numSubject; i++) {
		if (score < S[m - 1].psub[i].score) {
			score = S[m - 1].psub[i].score;
			c = i;
		}
	}
	strcpy(str2, S[m - 1].psub[c].name);
	printf("%s %s %.2lf %s %.2lf\n", S[m - 1].name, S[m - 1].id, S[m - 1].avg, str2, score);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < S[i].numSubject; j++) {
			free(S[i].psub[j].name);
		}
		free(S[i].psub);
		free(S[i].name);
	}
	free(S);

	return 0;
}

/*
HongGilDong 1003 Math 85 C 80 AdvC 90
JeonWooChi 1001 English 60 C 75 Physics 80 Math 70
HeungBoo 1002 Economics 80 AdvC 90 Math 80 C 90
NolBoo 1004 Ethics 50 C 62
Euler 1005 Math 100 Physics 90 AdvC 85
*/

4.
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct {
	char name[21];	// 관광지명
	int fee;		// 입장료
	char in_or_out;	// 야외/실내
	char date[9];	// 관광지 시작일
	char city[21];	// 도시명
}tourcity;
typedef struct {
	char name[21];
	int spot;
}city;
int main() {
	tourcity **p = NULL, *q = NULL; //구조체 선언
	city *C = NULL; //구조체 선언
	int n; //변수선언
	scanf("%d", &n);
	getchar();
	p = (tourcity**)malloc(n * sizeof(tourcity*));		
	if (p == NULL) {
		printf("Not Enough Memory.");
		return -1;
	}
	C = (city*)malloc(n * sizeof(city));		
	if (C == NULL) {
		printf("Not Enough Memory.");
		return -1;
	}
	for (int i = 0; i < n; i++) {
		scanf("%s", C[i].name);
		getchar();
	}
	for (int i = 0; i < n; i++) {
		scanf("%d", &C[i].spot);
		getchar();
		p[i] = (tourcity*)malloc(C[i].spot * sizeof(tourcity));	
		if (p[i] == NULL) {
			printf("Not Enough Memory.");
			return -1;
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < C[i].spot; j++) {
			scanf("%s %d %c %s", p[i][j].name, &p[i][j].fee, &p[i][j].in_or_out, p[i][j].date);
			strcpy(p[i][j].city, C[i].name);
			getchar();
		}
	}
	q = p[0];
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < C[i].spot; j++) {
			if (q->fee < p[i][j].fee) {
				q = &p[i][j];
			}
			else if (q->fee == p[i][j].fee && strcmp(q->date, p[i][j].date) > 0) {
				q = &p[i][j];
			}
		}
	}
	printf("%s %s %d %s %c", q->city, q->name, q->fee, q->date, q->in_or_out);
	for (int i = 0; i < n; i++)
		free(p[i]);
	free(C);
	free(p);

	return 0;
}
